{"ast":null,"code":"import { dijkstra } from \"./dijkstra\";\nimport { dfs } from \"./dfs\";\nimport { bfs } from \"./bfs\";\nimport { astar } from \"./astar\";\nexport { dijkstra, dfs, bfs, astar, getNodesInShortestPathOrder, getAllNodes, sortNodesByDistance, getUnvisitedNeighbours };\n\n/*----------------------------------------------------common helper functions----------------------------------------------------*/\n// returns an array of nodes from the grid\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// sorts the nodes by distance\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\n// returns an array of unvisited neighbours of the node\nfunction getUnvisitedNeighbours(node, grid) {\n  const neighbours = [];\n  const {\n    row,\n    col\n  } = node;\n  if (row > 0) neighbours.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col > 0) neighbours.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbours.push(grid[row][col + 1]);\n  return neighbours.filter(neighbor => !neighbor.isVisited);\n}\n\n// backtracks from the finishNode to find the shortest path\n// only works when called *after* the algorithm function is executed\nfunction getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["dijkstra","dfs","bfs","astar","getNodesInShortestPathOrder","getAllNodes","sortNodesByDistance","getUnvisitedNeighbours","grid","nodes","row","node","push","unvisitedNodes","sort","nodeA","nodeB","distance","neighbours","col","length","filter","neighbor","isVisited","finishNode","nodesInShortestPathOrder","currentNode","unshift","previousNode"],"sources":["C:/Users/Deekshith/Desktop/pathfinder/PathFinding-Algorithm-Path-visualizer/src/algorithms/index.js"],"sourcesContent":["import { dijkstra } from \"./dijkstra\";\r\nimport { dfs } from \"./dfs\";\r\nimport { bfs } from \"./bfs\";\r\nimport { astar } from \"./astar\";\r\n\r\nexport { dijkstra, dfs, bfs, astar, getNodesInShortestPathOrder, getAllNodes, sortNodesByDistance, getUnvisitedNeighbours };\r\n\r\n/*----------------------------------------------------common helper functions----------------------------------------------------*/\r\n// returns an array of nodes from the grid\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// sorts the nodes by distance\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\n// returns an array of unvisited neighbours of the node\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  const neighbours = [];\r\n  const { row, col } = node;\r\n  if (row > 0)\r\n    neighbours.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1)\r\n    neighbours.push(grid[row + 1][col]);\r\n  if (col > 0)\r\n    neighbours.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1)\r\n    neighbours.push(grid[row][col + 1]);\r\n  return neighbours.filter(neighbor => !neighbor.isVisited);\r\n}\r\n  \r\n// backtracks from the finishNode to find the shortest path\r\n// only works when called *after* the algorithm function is executed\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,YAAY;AACrC,SAASC,GAAG,QAAQ,OAAO;AAC3B,SAASC,GAAG,QAAQ,OAAO;AAC3B,SAASC,KAAK,QAAQ,SAAS;AAE/B,SAASH,QAAQ,EAAEC,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAEC,2BAA2B,EAAEC,WAAW,EAAEC,mBAAmB,EAAEC,sBAAsB;;AAEzH;AACA;AACA,SAASF,WAAWA,CAACG,IAAI,EAAE;EACzB,MAAMC,KAAK,GAAG,EAAE;EAChB,KAAK,MAAMC,GAAG,IAAIF,IAAI,EAAE;IACtB,KAAK,MAAMG,IAAI,IAAID,GAAG,EAAE;MACtBD,KAAK,CAACG,IAAI,CAACD,IAAI,CAAC;IAClB;EACF;EACA,OAAOF,KAAK;AACd;;AAEA;AACA,SAASH,mBAAmBA,CAACO,cAAc,EAAE;EAC3CA,cAAc,CAACC,IAAI,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAKD,KAAK,CAACE,QAAQ,GAAGD,KAAK,CAACC,QAAQ,CAAC;AACxE;;AAEA;AACA,SAASV,sBAAsBA,CAACI,IAAI,EAAEH,IAAI,EAAE;EAC1C,MAAMU,UAAU,GAAG,EAAE;EACrB,MAAM;IAAER,GAAG;IAAES;EAAI,CAAC,GAAGR,IAAI;EACzB,IAAID,GAAG,GAAG,CAAC,EACTQ,UAAU,CAACN,IAAI,CAACJ,IAAI,CAACE,GAAG,GAAG,CAAC,CAAC,CAACS,GAAG,CAAC,CAAC;EACrC,IAAIT,GAAG,GAAGF,IAAI,CAACY,MAAM,GAAG,CAAC,EACvBF,UAAU,CAACN,IAAI,CAACJ,IAAI,CAACE,GAAG,GAAG,CAAC,CAAC,CAACS,GAAG,CAAC,CAAC;EACrC,IAAIA,GAAG,GAAG,CAAC,EACTD,UAAU,CAACN,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAC,CAACS,GAAG,GAAG,CAAC,CAAC,CAAC;EACrC,IAAIA,GAAG,GAAGX,IAAI,CAAC,CAAC,CAAC,CAACY,MAAM,GAAG,CAAC,EAC1BF,UAAU,CAACN,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAC,CAACS,GAAG,GAAG,CAAC,CAAC,CAAC;EACrC,OAAOD,UAAU,CAACG,MAAM,CAACC,QAAQ,IAAI,CAACA,QAAQ,CAACC,SAAS,CAAC;AAC3D;;AAEA;AACA;AACA,SAASnB,2BAA2BA,CAACoB,UAAU,EAAE;EAC/C,MAAMC,wBAAwB,GAAG,EAAE;EACnC,IAAIC,WAAW,GAAGF,UAAU;EAC5B,OAAOE,WAAW,KAAK,IAAI,EAAE;IAC3BD,wBAAwB,CAACE,OAAO,CAACD,WAAW,CAAC;IAC7CA,WAAW,GAAGA,WAAW,CAACE,YAAY;EACxC;EACA,OAAOH,wBAAwB;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}