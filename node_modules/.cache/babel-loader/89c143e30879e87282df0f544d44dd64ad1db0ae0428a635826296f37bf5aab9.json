{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Deekshith\\\\Desktop\\\\pathfinder\\\\PathFinding-Algorithm-Path-visualizer\\\\src\\\\components\\\\DarkModeToggle\\\\DarkModeToggle.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport \"./DarkModeToggle.scss\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CheckedIcon = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: \"\\uD83C\\uDF1C\"\n}, void 0, false);\n_c = CheckedIcon;\nconst UncheckedIcon = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: \"\\uD83C\\uDF1E\"\n}, void 0, false);\n_c2 = UncheckedIcon;\nconst DarkModeToggle = props => {\n  _s();\n  const [toggle, setToggle] = useState(false);\n  const {\n    defaultChecked,\n    onChange,\n    disabled,\n    className\n  } = props;\n  useEffect(() => {\n    if (defaultChecked) {\n      setToggle(defaultChecked);\n    }\n  }, [defaultChecked]);\n  const triggerToggle = () => {\n    if (disabled) {\n      return;\n    }\n    setToggle(!toggle);\n    if (typeof onChange === 'function') {\n      onChange(!toggle);\n    }\n  };\n  const getIcon = type => {\n    const {\n      icons\n    } = props;\n    if (!icons) {\n      return null;\n    }\n    return icons[type] === undefined ? DarkModeToggle.defaultProps.icons[type] : icons[type];\n  };\n  const toggleClasses = classNames('wrg-toggle', {\n    'wrg-toggle--checked': toggle,\n    'wrg-toggle--disabled': disabled\n  }, className);\n  if (toggle) {\n    console.log('setting toggle');\n    document.body.classList.remove(\"DarkMode\");\n    document.body.classList.add(\"LightMode\");\n  } else {\n    document.body.classList.remove(\"LightMode\");\n    document.body.classList.add(\"DarkMode\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: triggerToggle,\n    className: toggleClasses,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrg-toggle-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wrg-toggle-check\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: getIcon('checked')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wrg-toggle-uncheck\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: getIcon('unchecked')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrg-toggle-circle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      \"aria-label\": \"Toggle Button\",\n      className: \"wrg-toggle-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(DarkModeToggle, \"E5z+7KxU27TYd2kLomdFOtK8mpg=\");\n_c3 = DarkModeToggle;\nDarkModeToggle.defaultProps = {\n  icons: {\n    checked: /*#__PURE__*/_jsxDEV(CheckedIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 18\n    }, this),\n    unchecked: /*#__PURE__*/_jsxDEV(UncheckedIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 20\n    }, this)\n  }\n};\nDarkModeToggle.propTypes = {\n  disabled: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n  icons: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({\n    checked: PropTypes.node,\n    unchecked: PropTypes.node\n  })])\n};\nexport default DarkModeToggle;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CheckedIcon\");\n$RefreshReg$(_c2, \"UncheckedIcon\");\n$RefreshReg$(_c3, \"DarkModeToggle\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","classNames","Fragment","_Fragment","jsxDEV","_jsxDEV","CheckedIcon","children","_c","UncheckedIcon","_c2","DarkModeToggle","props","_s","toggle","setToggle","defaultChecked","onChange","disabled","className","triggerToggle","getIcon","type","icons","undefined","defaultProps","toggleClasses","console","log","document","body","classList","remove","add","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c3","checked","unchecked","propTypes","bool","string","func","oneOfType","shape","node","$RefreshReg$"],"sources":["C:/Users/Deekshith/Desktop/pathfinder/PathFinding-Algorithm-Path-visualizer/src/components/DarkModeToggle/DarkModeToggle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport \"./DarkModeToggle.scss\"\r\n\r\nconst CheckedIcon = () => <>ðŸŒœ</>;\r\nconst UncheckedIcon = () => <>ðŸŒž</>;\r\n\r\nconst DarkModeToggle = (props) => {\r\n\r\n    const [toggle, setToggle] = useState(false);\r\n    const { defaultChecked, onChange, disabled, className } = props;\r\n\r\n    useEffect(() => {\r\n        if (defaultChecked) {\r\n            setToggle(defaultChecked)\r\n        }\r\n    }, [defaultChecked]);\r\n\r\n    const triggerToggle = () => {\r\n        if ( disabled ) {\r\n            return;\r\n        }\r\n\r\n        setToggle(!toggle);\r\n\r\n        if ( typeof onChange === 'function' ) {\r\n            onChange(!toggle);\r\n        }\r\n    }\r\n\r\n    const getIcon = (type) => {\r\n        const { icons } = props;\r\n        if ( ! icons ) {\r\n            return null;\r\n        }\r\n\r\n        return icons[type] === undefined ?\r\n            DarkModeToggle.defaultProps.icons[type] :\r\n            icons[type];\r\n    }\r\n\r\n    const toggleClasses = classNames('wrg-toggle', {\r\n        'wrg-toggle--checked': toggle,\r\n        'wrg-toggle--disabled': disabled\r\n    }, className);\r\n\r\n    if (toggle) {\r\n        console.log('setting toggle')\r\n        document.body.classList.remove(\"DarkMode\");\r\n        document.body.classList.add(\"LightMode\");\r\n    }\r\n    else {\r\n        document.body.classList.remove(\"LightMode\");\r\n        document.body.classList.add(\"DarkMode\");\r\n    }\r\n\r\n    return (\r\n        <div onClick={triggerToggle} className={toggleClasses}>\r\n            <div className=\"wrg-toggle-container\">\r\n                <div className=\"wrg-toggle-check\">\r\n                    <span>{ getIcon('checked') }</span>\r\n                </div>\r\n                <div className=\"wrg-toggle-uncheck\">\r\n                    <span>{ getIcon('unchecked') }</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"wrg-toggle-circle\"></div>\r\n            <input type=\"checkbox\" aria-label=\"Toggle Button\" className=\"wrg-toggle-input\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nDarkModeToggle.defaultProps = {\r\n    icons: {\r\n        checked: <CheckedIcon />, \r\n        unchecked: <UncheckedIcon />\r\n    }\r\n};\r\n\r\nDarkModeToggle.propTypes = {\r\n    disabled: PropTypes.bool,\r\n    defaultChecked: PropTypes.bool,\r\n    className: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    icons: PropTypes.oneOfType([\r\n        PropTypes.bool,\r\n        PropTypes.shape({\r\n            checked: PropTypes.node,\r\n            unchecked: PropTypes.node\r\n        })\r\n    ])\r\n};\r\n\r\nexport default DarkModeToggle;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}