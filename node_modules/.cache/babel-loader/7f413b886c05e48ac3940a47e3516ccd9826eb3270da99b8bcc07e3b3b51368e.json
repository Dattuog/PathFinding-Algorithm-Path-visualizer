{"ast":null,"code":"// a random maze generator\n// gets the grid, start and finish node\n// it just uses a random func to decide \n// when to push the wall into grid\nexport function randomMaze(grid, startNode, finishNode) {\n  let walls = [];\n  for (let row = 0; row < grid.length; row++) {\n    for (let col = 0; col < grid[0].length; col++) {\n      // skip if it's the start or finish node\n      if (row === startNode.row && col === startNode.col || col === finishNode.row && col === finishNode.col) {\n        continue;\n      }\n      // random func to make decision to push the wall into the grid\n      if (Math.random() < 0.33) {\n        walls.push([row, col]);\n      }\n    }\n  }\n  // to jumble up the order in which the walls are animated,\n  // to make it look random \n  walls.sort(() => Math.random() - 0.5);\n  return walls;\n}","map":{"version":3,"names":["randomMaze","grid","startNode","finishNode","walls","row","length","col","Math","random","push","sort"],"sources":["C:/Users/Deekshith/Desktop/pathfinder/PathFinding-Algorithm-Path-visualizer/src/maze-algorithms/randomMaze.js"],"sourcesContent":["// a random maze generator\r\n// gets the grid, start and finish node\r\n// it just uses a random func to decide \r\n// when to push the wall into grid\r\nexport function randomMaze(grid, startNode, finishNode) {\r\n    let walls = [];\r\n    for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[0].length; col++) {\r\n            // skip if it's the start or finish node\r\n            if ((row === startNode.row && col === startNode.col) || (col === finishNode.row && col === finishNode.col)) {\r\n                continue;\r\n            }\r\n            // random func to make decision to push the wall into the grid\r\n            if (Math.random() < 0.33) {\r\n                walls.push([row, col]);\r\n            }\r\n        }\r\n    }\r\n    // to jumble up the order in which the walls are animated,\r\n    // to make it look random \r\n    walls.sort(() => Math.random() - 0.5);\r\n    return walls;\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAUA,CAACC,IAAI,EAAEC,SAAS,EAAEC,UAAU,EAAE;EACpD,IAAIC,KAAK,GAAG,EAAE;EACd,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGJ,IAAI,CAACK,MAAM,EAAED,GAAG,EAAE,EAAE;IACxC,KAAK,IAAIE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGN,IAAI,CAAC,CAAC,CAAC,CAACK,MAAM,EAAEC,GAAG,EAAE,EAAE;MAC3C;MACA,IAAKF,GAAG,KAAKH,SAAS,CAACG,GAAG,IAAIE,GAAG,KAAKL,SAAS,CAACK,GAAG,IAAMA,GAAG,KAAKJ,UAAU,CAACE,GAAG,IAAIE,GAAG,KAAKJ,UAAU,CAACI,GAAI,EAAE;QACxG;MACJ;MACA;MACA,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,EAAE;QACtBL,KAAK,CAACM,IAAI,CAAC,CAACL,GAAG,EAAEE,GAAG,CAAC,CAAC;MAC1B;IACJ;EACJ;EACA;EACA;EACAH,KAAK,CAACO,IAAI,CAAC,MAAMH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;EACrC,OAAOL,KAAK;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}